%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(updateProfileReq_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("updateProfileReq_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type updateProfileReq() :: #updateProfileReq{}.
-export_type(['updateProfileReq'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #updateProfileReq{} ->
	  e_msg_updateProfileReq(Msg, TrUserData)
    end.



e_msg_updateProfileReq(Msg, TrUserData) ->
    e_msg_updateProfileReq(Msg, <<>>, TrUserData).


e_msg_updateProfileReq(#updateProfileReq{uid = F1,
					 nickname = F2, status = F3,
					 mobile = F4, avatar = F5, rolestr = F6,
					 lat = F7, lng = F8},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_string(TrF5, <<B4/binary, 42>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_string(TrF6, <<B5/binary, 50>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_string(TrF7, <<B6/binary, 58>>)
		end
	 end,
    if F8 == undefined -> B7;
       true ->
	   begin
	     TrF8 = id(F8, TrUserData),
	     e_type_string(TrF8, <<B7/binary, 66>>)
	   end
    end.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      updateProfileReq ->
	  d_msg_updateProfileReq(Bin, TrUserData)
    end.



d_msg_updateProfileReq(Bin, TrUserData) ->
    dfp_read_field_def_updateProfileReq(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_updateProfileReq(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				    TrUserData) ->
    d_field_updateProfileReq_uid(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_updateProfileReq(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				    TrUserData) ->
    d_field_updateProfileReq_nickname(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_updateProfileReq(<<24, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				    TrUserData) ->
    d_field_updateProfileReq_status(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_updateProfileReq(<<34, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				    TrUserData) ->
    d_field_updateProfileReq_mobile(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_updateProfileReq(<<42, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				    TrUserData) ->
    d_field_updateProfileReq_avatar(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_updateProfileReq(<<50, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				    TrUserData) ->
    d_field_updateProfileReq_rolestr(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_updateProfileReq(<<58, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				    TrUserData) ->
    d_field_updateProfileReq_lat(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_updateProfileReq(<<66, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				    TrUserData) ->
    d_field_updateProfileReq_lng(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_updateProfileReq(<<>>, 0, 0, F1, F2,
				    F3, F4, F5, F6, F7, F8, _) ->
    #updateProfileReq{uid = F1, nickname = F2, status = F3,
		      mobile = F4, avatar = F5, rolestr = F6, lat = F7,
		      lng = F8};
dfp_read_field_def_updateProfileReq(Other, Z1, Z2, F1,
				    F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    dg_read_field_def_updateProfileReq(Other, Z1, Z2, F1,
				       F2, F3, F4, F5, F6, F7, F8, TrUserData).

dg_read_field_def_updateProfileReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_updateProfileReq(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, TrUserData);
dg_read_field_def_updateProfileReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_updateProfileReq_uid(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, TrUserData);
      18 ->
	  d_field_updateProfileReq_nickname(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, TrUserData);
      24 ->
	  d_field_updateProfileReq_status(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, TrUserData);
      34 ->
	  d_field_updateProfileReq_mobile(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, TrUserData);
      42 ->
	  d_field_updateProfileReq_avatar(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, TrUserData);
      50 ->
	  d_field_updateProfileReq_rolestr(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, TrUserData);
      58 ->
	  d_field_updateProfileReq_lat(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, TrUserData);
      66 ->
	  d_field_updateProfileReq_lng(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_updateProfileReq(Rest, 0, 0, F1, F2, F3, F4,
					     F5, F6, F7, F8, TrUserData);
	    1 ->
		skip_64_updateProfileReq(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, F8, TrUserData);
	    2 ->
		skip_length_delimited_updateProfileReq(Rest, 0, 0, F1,
						       F2, F3, F4, F5, F6, F7,
						       F8, TrUserData);
	    5 ->
		skip_32_updateProfileReq(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, F8, TrUserData)
	  end
    end;
dg_read_field_def_updateProfileReq(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, F6, F7, F8, _) ->
    #updateProfileReq{uid = F1, nickname = F2, status = F3,
		      mobile = F4, avatar = F5, rolestr = F6, lat = F7,
		      lng = F8}.

d_field_updateProfileReq_uid(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_updateProfileReq_uid(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_updateProfileReq_uid(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, F4, F5, F6, F7, F8,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_updateProfileReq(Rest2, 0, 0,
					NewFValue, F2, F3, F4, F5, F6, F7, F8,
					TrUserData).


d_field_updateProfileReq_nickname(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  TrUserData)
    when N < 57 ->
    d_field_updateProfileReq_nickname(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, TrUserData);
d_field_updateProfileReq_nickname(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5, F6, F7, F8,
				  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_updateProfileReq(Rest2, 0, 0, F1,
					NewFValue, F3, F4, F5, F6, F7, F8,
					TrUserData).


d_field_updateProfileReq_status(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData)
    when N < 57 ->
    d_field_updateProfileReq_status(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, TrUserData);
d_field_updateProfileReq_status(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, F4, F5, F6, F7, F8,
				TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_updateProfileReq(Rest, 0, 0, F1, F2,
					NewFValue, F4, F5, F6, F7, F8,
					TrUserData).


d_field_updateProfileReq_mobile(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData)
    when N < 57 ->
    d_field_updateProfileReq_mobile(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, TrUserData);
d_field_updateProfileReq_mobile(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, _, F5, F6, F7, F8,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_updateProfileReq(Rest2, 0, 0, F1, F2,
					F3, NewFValue, F5, F6, F7, F8,
					TrUserData).


d_field_updateProfileReq_avatar(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				TrUserData)
    when N < 57 ->
    d_field_updateProfileReq_avatar(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, TrUserData);
d_field_updateProfileReq_avatar(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, _, F6, F7, F8,
				TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_updateProfileReq(Rest2, 0, 0, F1, F2,
					F3, F4, NewFValue, F6, F7, F8,
					TrUserData).


d_field_updateProfileReq_rolestr(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				 TrUserData)
    when N < 57 ->
    d_field_updateProfileReq_rolestr(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, TrUserData);
d_field_updateProfileReq_rolestr(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, _, F7, F8,
				 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_updateProfileReq(Rest2, 0, 0, F1, F2,
					F3, F4, F5, NewFValue, F7, F8,
					TrUserData).


d_field_updateProfileReq_lat(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_updateProfileReq_lat(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_updateProfileReq_lat(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, _, F8,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_updateProfileReq(Rest2, 0, 0, F1, F2,
					F3, F4, F5, F6, NewFValue, F8,
					TrUserData).


d_field_updateProfileReq_lng(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
    when N < 57 ->
    d_field_updateProfileReq_lng(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_updateProfileReq_lng(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, _,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_updateProfileReq(Rest2, 0, 0, F1, F2,
					F3, F4, F5, F6, F7, NewFValue,
					TrUserData).


skip_varint_updateProfileReq(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
			     TrUserData) ->
    skip_varint_updateProfileReq(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, TrUserData);
skip_varint_updateProfileReq(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
			     TrUserData) ->
    dfp_read_field_def_updateProfileReq(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, TrUserData).


skip_length_delimited_updateProfileReq(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       TrUserData)
    when N < 57 ->
    skip_length_delimited_updateProfileReq(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, TrUserData);
skip_length_delimited_updateProfileReq(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_updateProfileReq(Rest2, 0, 0, F1, F2,
					F3, F4, F5, F6, F7, F8, TrUserData).


skip_32_updateProfileReq(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_updateProfileReq(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, TrUserData).


skip_64_updateProfileReq(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
    dfp_read_field_def_updateProfileReq(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #updateProfileReq{} ->
	  merge_msg_updateProfileReq(Prev, New, TrUserData)
    end.

merge_msg_updateProfileReq(#updateProfileReq{avatar =
						 PFavatar,
					     rolestr = PFrolestr, lat = PFlat,
					     lng = PFlng},
			   #updateProfileReq{uid = NFuid, nickname = NFnickname,
					     status = NFstatus,
					     mobile = NFmobile,
					     avatar = NFavatar,
					     rolestr = NFrolestr, lat = NFlat,
					     lng = NFlng},
			   _) ->
    #updateProfileReq{uid = NFuid, nickname = NFnickname,
		      status = NFstatus, mobile = NFmobile,
		      avatar =
			  if NFavatar =:= undefined -> PFavatar;
			     true -> NFavatar
			  end,
		      rolestr =
			  if NFrolestr =:= undefined -> PFrolestr;
			     true -> NFrolestr
			  end,
		      lat =
			  if NFlat =:= undefined -> PFlat;
			     true -> NFlat
			  end,
		      lng =
			  if NFlng =:= undefined -> PFlng;
			     true -> NFlng
			  end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #updateProfileReq{} ->
	  v_msg_updateProfileReq(Msg, [updateProfileReq],
				 TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_updateProfileReq/3}).
v_msg_updateProfileReq(#updateProfileReq{uid = F1,
					 nickname = F2, status = F3,
					 mobile = F4, avatar = F5, rolestr = F6,
					 lat = F7, lng = F8},
		       Path, _) ->
    v_type_string(F1, [uid | Path]),
    v_type_string(F2, [nickname | Path]),
    v_type_int32(F3, [status | Path]),
    v_type_string(F4, [mobile | Path]),
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [avatar | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [rolestr | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [lat | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [lng | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{msg, updateProfileReq},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nickname, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = status, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = mobile, fnum = 4, rnum = 5, type = string,
	      occurrence = required, opts = []},
       #field{name = avatar, fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #field{name = rolestr, fnum = 6, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = lat, fnum = 7, rnum = 8, type = string,
	      occurrence = optional, opts = []},
       #field{name = lng, fnum = 8, rnum = 9, type = string,
	      occurrence = optional, opts = []}]}].


get_msg_names() -> [updateProfileReq].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(updateProfileReq) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nickname, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = status, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = mobile, fnum = 4, rnum = 5, type = string,
	    occurrence = required, opts = []},
     #field{name = avatar, fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #field{name = rolestr, fnum = 6, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = lat, fnum = 7, rnum = 8, type = string,
	    occurrence = optional, opts = []},
     #field{name = lng, fnum = 8, rnum = 9, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'com.paintfriend.chat.proto'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
