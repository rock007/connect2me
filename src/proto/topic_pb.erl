%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(topic_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_topicResponse.Error'/1, 'enum_value_by_symbol_topicResponse.Error'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("topic_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'topicResponse.Error'() :: 'ERR_OK' | 'ERR_SYS'.
-export_type(['topicResponse.Error'/0]).

%% message types
-type topicResponse() :: #topicResponse{}.
-type topicRequest() :: #topicRequest{}.
-export_type(['topicResponse'/0, 'topicRequest'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #topicResponse{} ->
	  e_msg_topicResponse(Msg, TrUserData);
      #topicRequest{} -> e_msg_topicRequest(Msg, TrUserData)
    end.



e_msg_topicResponse(Msg, TrUserData) ->
    e_msg_topicResponse(Msg, <<>>, TrUserData).


e_msg_topicResponse(#topicResponse{err_code = F1,
				   err_msg = F2},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_topicRequest(Msg, TrUserData) ->
    e_msg_topicRequest(Msg, <<>>, TrUserData).


e_msg_topicRequest(#topicRequest{topic = F1}, Bin,
		   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      topicResponse -> d_msg_topicResponse(Bin, TrUserData);
      topicRequest -> d_msg_topicRequest(Bin, TrUserData)
    end.



d_msg_topicResponse(Bin, TrUserData) ->
    dfp_read_field_def_topicResponse(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_topicResponse(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, TrUserData) ->
    d_field_topicResponse_err_code(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_topicResponse(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    d_field_topicResponse_err_msg(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_topicResponse(<<>>, 0, 0, F1, F2,
				 _) ->
    #topicResponse{err_code = F1, err_msg = F2};
dfp_read_field_def_topicResponse(Other, Z1, Z2, F1, F2,
				 TrUserData) ->
    dg_read_field_def_topicResponse(Other, Z1, Z2, F1, F2,
				    TrUserData).

dg_read_field_def_topicResponse(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_topicResponse(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_topicResponse(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_topicResponse_err_code(Rest, 0, 0, F1, F2,
					 TrUserData);
      18 ->
	  d_field_topicResponse_err_msg(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_topicResponse(Rest, 0, 0, F1, F2,
					  TrUserData);
	    1 ->
		skip_64_topicResponse(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_topicResponse(Rest, 0, 0, F1, F2,
						    TrUserData);
	    5 ->
		skip_32_topicResponse(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_topicResponse(<<>>, 0, 0, F1, F2,
				_) ->
    #topicResponse{err_code = F1, err_msg = F2}.

d_field_topicResponse_err_code(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_topicResponse_err_code(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_topicResponse_err_code(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_topicResponse(Rest, 0, 0, NewFValue,
				     F2, TrUserData).


d_field_topicResponse_err_msg(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_topicResponse_err_msg(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_topicResponse_err_msg(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_topicResponse(Rest2, 0, 0, F1,
				     NewFValue, TrUserData).


skip_varint_topicResponse(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    skip_varint_topicResponse(Rest, Z1, Z2, F1, F2,
			      TrUserData);
skip_varint_topicResponse(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_topicResponse(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_length_delimited_topicResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_topicResponse(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_topicResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_topicResponse(Rest2, 0, 0, F1, F2,
				     TrUserData).


skip_32_topicResponse(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_topicResponse(Rest, Z1, Z2, F1, F2,
				     TrUserData).


skip_64_topicResponse(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, TrUserData) ->
    dfp_read_field_def_topicResponse(Rest, Z1, Z2, F1, F2,
				     TrUserData).


d_msg_topicRequest(Bin, TrUserData) ->
    dfp_read_field_def_topicRequest(Bin, 0, 0,
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_topicRequest(<<10, Rest/binary>>, Z1,
				Z2, F1, TrUserData) ->
    d_field_topicRequest_topic(Rest, Z1, Z2, F1,
			       TrUserData);
dfp_read_field_def_topicRequest(<<>>, 0, 0, F1, _) ->
    #topicRequest{topic = F1};
dfp_read_field_def_topicRequest(Other, Z1, Z2, F1,
				TrUserData) ->
    dg_read_field_def_topicRequest(Other, Z1, Z2, F1,
				   TrUserData).

dg_read_field_def_topicRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_topicRequest(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_topicRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_topicRequest_topic(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_topicRequest(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_topicRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_topicRequest(Rest, 0, 0, F1,
						   TrUserData);
	    5 -> skip_32_topicRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_topicRequest(<<>>, 0, 0, F1, _) ->
    #topicRequest{topic = F1}.

d_field_topicRequest_topic(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 57 ->
    d_field_topicRequest_topic(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
d_field_topicRequest_topic(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_topicRequest(Rest2, 0, 0, NewFValue,
				    TrUserData).


skip_varint_topicRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    skip_varint_topicRequest(Rest, Z1, Z2, F1, TrUserData);
skip_varint_topicRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, TrUserData) ->
    dfp_read_field_def_topicRequest(Rest, Z1, Z2, F1,
				    TrUserData).


skip_length_delimited_topicRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_topicRequest(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_topicRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_topicRequest(Rest2, 0, 0, F1,
				    TrUserData).


skip_32_topicRequest(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_topicRequest(Rest, Z1, Z2, F1,
				    TrUserData).


skip_64_topicRequest(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     TrUserData) ->
    dfp_read_field_def_topicRequest(Rest, Z1, Z2, F1,
				    TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #topicResponse{} ->
	  merge_msg_topicResponse(Prev, New, TrUserData);
      #topicRequest{} ->
	  merge_msg_topicRequest(Prev, New, TrUserData)
    end.

merge_msg_topicResponse(#topicResponse{},
			#topicResponse{err_code = NFerr_code,
				       err_msg = NFerr_msg},
			_) ->
    #topicResponse{err_code = NFerr_code,
		   err_msg = NFerr_msg}.

merge_msg_topicRequest(#topicRequest{},
		       #topicRequest{topic = NFtopic}, _) ->
    #topicRequest{topic = NFtopic}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #topicResponse{} ->
	  v_msg_topicResponse(Msg, [topicResponse], TrUserData);
      #topicRequest{} ->
	  v_msg_topicRequest(Msg, [topicRequest], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_topicResponse/3}).
v_msg_topicResponse(#topicResponse{err_code = F1,
				   err_msg = F2},
		    Path, _) ->
    v_type_int32(F1, [err_code | Path]),
    v_type_string(F2, [err_msg | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_topicRequest/3}).
v_msg_topicRequest(#topicRequest{topic = F1}, Path,
		   _) ->
    v_type_string(F1, [topic | Path]), ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{enum, 'topicResponse.Error'},
      [{'ERR_OK', 0}, {'ERR_SYS', -1}]},
     {{msg, topicResponse},
      [#field{name = err_code, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = err_msg, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, topicRequest},
      [#field{name = topic, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]}].


get_msg_names() -> [topicResponse, topicRequest].


get_enum_names() -> ['topicResponse.Error'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(topicResponse) ->
    [#field{name = err_code, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = err_msg, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def(topicRequest) ->
    [#field{name = topic, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('topicResponse.Error') ->
    [{'ERR_OK', 0}, {'ERR_SYS', -1}];
find_enum_def(_) -> error.


enum_symbol_by_value('topicResponse.Error', Value) ->
    'enum_symbol_by_value_topicResponse.Error'(Value).


enum_value_by_symbol('topicResponse.Error', Sym) ->
    'enum_value_by_symbol_topicResponse.Error'(Sym).


'enum_symbol_by_value_topicResponse.Error'(0) ->
    'ERR_OK';
'enum_symbol_by_value_topicResponse.Error'(-1) ->
    'ERR_SYS'.


'enum_value_by_symbol_topicResponse.Error'('ERR_OK') ->
    0;
'enum_value_by_symbol_topicResponse.Error'('ERR_SYS') ->
    -1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'com.paintfriend.backend.proto'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
