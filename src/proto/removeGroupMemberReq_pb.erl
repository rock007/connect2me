%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(removeGroupMemberReq_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("removeGroupMemberReq_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type groupMember() :: #groupMember{}.
-type removeGroupMemberReq() :: #removeGroupMemberReq{}.
-export_type(['groupMember'/0, 'removeGroupMemberReq'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #groupMember{} -> e_msg_groupMember(Msg, TrUserData);
      #removeGroupMemberReq{} ->
	  e_msg_removeGroupMemberReq(Msg, TrUserData)
    end.



e_msg_groupMember(Msg, TrUserData) ->
    e_msg_groupMember(Msg, <<>>, TrUserData).


e_msg_groupMember(#groupMember{groupId = F1,
			       userId = F2, nickName = F3},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_string(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_removeGroupMemberReq(Msg, TrUserData) ->
    e_msg_removeGroupMemberReq(Msg, <<>>, TrUserData).


e_msg_removeGroupMemberReq(#removeGroupMemberReq{members
						     = F1},
			   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_removeGroupMemberReq_members(TrF1, Bin,
						  TrUserData)
      end
    end.

e_mfield_removeGroupMemberReq_members(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_groupMember(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_removeGroupMemberReq_members([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_removeGroupMemberReq_members(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_removeGroupMemberReq_members(Rest, Bin3,
					 TrUserData);
e_field_removeGroupMemberReq_members([], Bin,
				     _TrUserData) ->
    Bin.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      groupMember -> d_msg_groupMember(Bin, TrUserData);
      removeGroupMemberReq ->
	  d_msg_removeGroupMemberReq(Bin, TrUserData)
    end.



d_msg_groupMember(Bin, TrUserData) ->
    dfp_read_field_def_groupMember(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_groupMember(<<8, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_groupMember_groupId(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_groupMember(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_groupMember_userId(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_groupMember(<<26, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_groupMember_nickName(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_groupMember(<<>>, 0, 0, F1, F2, F3,
			       _) ->
    #groupMember{groupId = F1, userId = F2, nickName = F3};
dfp_read_field_def_groupMember(Other, Z1, Z2, F1, F2,
			       F3, TrUserData) ->
    dg_read_field_def_groupMember(Other, Z1, Z2, F1, F2, F3,
				  TrUserData).

dg_read_field_def_groupMember(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_groupMember(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_groupMember(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_groupMember_groupId(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      18 ->
	  d_field_groupMember_userId(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      26 ->
	  d_field_groupMember_nickName(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_groupMember(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    1 ->
		skip_64_groupMember(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_groupMember(Rest, 0, 0, F1, F2,
						  F3, TrUserData);
	    5 ->
		skip_32_groupMember(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_groupMember(<<>>, 0, 0, F1, F2, F3,
			      _) ->
    #groupMember{groupId = F1, userId = F2, nickName = F3}.

d_field_groupMember_groupId(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_groupMember_groupId(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_groupMember_groupId(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_groupMember(Rest, 0, 0, NewFValue,
				   F2, F3, TrUserData).


d_field_groupMember_userId(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_groupMember_userId(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_groupMember_userId(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_groupMember(Rest2, 0, 0, F1,
				   NewFValue, F3, TrUserData).


d_field_groupMember_nickName(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_groupMember_nickName(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_groupMember_nickName(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_groupMember(Rest2, 0, 0, F1, F2,
				   NewFValue, TrUserData).


skip_varint_groupMember(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    skip_varint_groupMember(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
skip_varint_groupMember(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_groupMember(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_length_delimited_groupMember(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_groupMember(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_groupMember(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_groupMember(Rest2, 0, 0, F1, F2, F3,
				   TrUserData).


skip_32_groupMember(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_groupMember(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_64_groupMember(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_groupMember(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


d_msg_removeGroupMemberReq(Bin, TrUserData) ->
    dfp_read_field_def_removeGroupMemberReq(Bin, 0, 0,
					    id([], TrUserData), TrUserData).

dfp_read_field_def_removeGroupMemberReq(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    d_field_removeGroupMemberReq_members(Rest, Z1, Z2, F1,
					 TrUserData);
dfp_read_field_def_removeGroupMemberReq(<<>>, 0, 0, F1,
					TrUserData) ->
    #removeGroupMemberReq{members =
			      lists_reverse(F1, TrUserData)};
dfp_read_field_def_removeGroupMemberReq(Other, Z1, Z2,
					F1, TrUserData) ->
    dg_read_field_def_removeGroupMemberReq(Other, Z1, Z2,
					   F1, TrUserData).

dg_read_field_def_removeGroupMemberReq(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_removeGroupMemberReq(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_removeGroupMemberReq(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_removeGroupMemberReq_members(Rest, 0, 0, F1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_removeGroupMemberReq(Rest, 0, 0, F1,
						 TrUserData);
	    1 ->
		skip_64_removeGroupMemberReq(Rest, 0, 0, F1,
					     TrUserData);
	    2 ->
		skip_length_delimited_removeGroupMemberReq(Rest, 0, 0,
							   F1, TrUserData);
	    5 ->
		skip_32_removeGroupMemberReq(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_removeGroupMemberReq(<<>>, 0, 0, F1,
				       TrUserData) ->
    #removeGroupMemberReq{members =
			      lists_reverse(F1, TrUserData)}.

d_field_removeGroupMemberReq_members(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_removeGroupMemberReq_members(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
d_field_removeGroupMemberReq_members(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_groupMember(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_removeGroupMemberReq(Rest2, 0, 0,
					    cons(NewFValue, F1, TrUserData),
					    TrUserData).


skip_varint_removeGroupMemberReq(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    skip_varint_removeGroupMemberReq(Rest, Z1, Z2, F1,
				     TrUserData);
skip_varint_removeGroupMemberReq(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_removeGroupMemberReq(Rest, Z1, Z2,
					    F1, TrUserData).


skip_length_delimited_removeGroupMemberReq(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_removeGroupMemberReq(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_removeGroupMemberReq(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_removeGroupMemberReq(Rest2, 0, 0, F1,
					    TrUserData).


skip_32_removeGroupMemberReq(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_removeGroupMemberReq(Rest, Z1, Z2,
					    F1, TrUserData).


skip_64_removeGroupMemberReq(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_removeGroupMemberReq(Rest, Z1, Z2,
					    F1, TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #groupMember{} ->
	  merge_msg_groupMember(Prev, New, TrUserData);
      #removeGroupMemberReq{} ->
	  merge_msg_removeGroupMemberReq(Prev, New, TrUserData)
    end.

merge_msg_groupMember(#groupMember{nickName =
				       PFnickName},
		      #groupMember{groupId = NFgroupId, userId = NFuserId,
				   nickName = NFnickName},
		      _) ->
    #groupMember{groupId = NFgroupId, userId = NFuserId,
		 nickName =
		     if NFnickName =:= undefined -> PFnickName;
			true -> NFnickName
		     end}.

merge_msg_removeGroupMemberReq(#removeGroupMemberReq{members
							 = PFmembers},
			       #removeGroupMemberReq{members = NFmembers},
			       TrUserData) ->
    #removeGroupMemberReq{members =
			      'erlang_++'(PFmembers, NFmembers, TrUserData)}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #groupMember{} ->
	  v_msg_groupMember(Msg, [groupMember], TrUserData);
      #removeGroupMemberReq{} ->
	  v_msg_removeGroupMemberReq(Msg, [removeGroupMemberReq],
				     TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_groupMember/3}).
v_msg_groupMember(#groupMember{groupId = F1,
			       userId = F2, nickName = F3},
		  Path, _) ->
    v_type_int32(F1, [groupId | Path]),
    v_type_string(F2, [userId | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [nickName | Path])
    end,
    ok;
v_msg_groupMember(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, groupMember}, X, Path).

-dialyzer({nowarn_function,v_msg_removeGroupMemberReq/3}).
v_msg_removeGroupMemberReq(#removeGroupMemberReq{members
						     = F1},
			   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_groupMember(Elem, [members | Path],
				  TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, groupMember}}, F1,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{msg, groupMember},
      [#field{name = groupId, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = userId, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = nickName, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, removeGroupMemberReq},
      [#field{name = members, fnum = 1, rnum = 2,
	      type = {msg, groupMember}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() -> [groupMember, removeGroupMemberReq].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(groupMember) ->
    [#field{name = groupId, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = userId, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = nickName, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(removeGroupMemberReq) ->
    [#field{name = members, fnum = 1, rnum = 2,
	    type = {msg, groupMember}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'com.paintfriend.chat.proto'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
