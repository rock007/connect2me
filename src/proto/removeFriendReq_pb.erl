%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(removeFriendReq_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("removeFriendReq_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type removeFriendReq() :: #removeFriendReq{}.
-export_type(['removeFriendReq'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #removeFriendReq{} ->
	  e_msg_removeFriendReq(Msg, TrUserData)
    end.



e_msg_removeFriendReq(Msg, TrUserData) ->
    e_msg_removeFriendReq(Msg, <<>>, TrUserData).


e_msg_removeFriendReq(#removeFriendReq{toUser = F1,
				       sendFrom = F2},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.



e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      removeFriendReq ->
	  d_msg_removeFriendReq(Bin, TrUserData)
    end.



d_msg_removeFriendReq(Bin, TrUserData) ->
    dfp_read_field_def_removeFriendReq(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_removeFriendReq(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_removeFriendReq_toUser(Rest, Z1, Z2, F1, F2,
				   TrUserData);
dfp_read_field_def_removeFriendReq(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_removeFriendReq_sendFrom(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_removeFriendReq(<<>>, 0, 0, F1, F2,
				   _) ->
    #removeFriendReq{toUser = F1, sendFrom = F2};
dfp_read_field_def_removeFriendReq(Other, Z1, Z2, F1,
				   F2, TrUserData) ->
    dg_read_field_def_removeFriendReq(Other, Z1, Z2, F1, F2,
				      TrUserData).

dg_read_field_def_removeFriendReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_removeFriendReq(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_removeFriendReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_removeFriendReq_toUser(Rest, 0, 0, F1, F2,
					 TrUserData);
      18 ->
	  d_field_removeFriendReq_sendFrom(Rest, 0, 0, F1, F2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_removeFriendReq(Rest, 0, 0, F1, F2,
					    TrUserData);
	    1 ->
		skip_64_removeFriendReq(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_removeFriendReq(Rest, 0, 0, F1,
						      F2, TrUserData);
	    5 ->
		skip_32_removeFriendReq(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_removeFriendReq(<<>>, 0, 0, F1, F2,
				  _) ->
    #removeFriendReq{toUser = F1, sendFrom = F2}.

d_field_removeFriendReq_toUser(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_removeFriendReq_toUser(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
d_field_removeFriendReq_toUser(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_removeFriendReq(Rest2, 0, 0,
				       NewFValue, F2, TrUserData).


d_field_removeFriendReq_sendFrom(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_removeFriendReq_sendFrom(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_removeFriendReq_sendFrom(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_removeFriendReq(Rest2, 0, 0, F1,
				       NewFValue, TrUserData).


skip_varint_removeFriendReq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_removeFriendReq(Rest, Z1, Z2, F1, F2,
				TrUserData);
skip_varint_removeFriendReq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_removeFriendReq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_length_delimited_removeFriendReq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_removeFriendReq(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_removeFriendReq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_removeFriendReq(Rest2, 0, 0, F1, F2,
				       TrUserData).


skip_32_removeFriendReq(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_removeFriendReq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_64_removeFriendReq(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_removeFriendReq(Rest, Z1, Z2, F1, F2,
				       TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #removeFriendReq{} ->
	  merge_msg_removeFriendReq(Prev, New, TrUserData)
    end.

merge_msg_removeFriendReq(#removeFriendReq{},
			  #removeFriendReq{toUser = NFtoUser,
					   sendFrom = NFsendFrom},
			  _) ->
    #removeFriendReq{toUser = NFtoUser,
		     sendFrom = NFsendFrom}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #removeFriendReq{} ->
	  v_msg_removeFriendReq(Msg, [removeFriendReq],
				TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_removeFriendReq/3}).
v_msg_removeFriendReq(#removeFriendReq{toUser = F1,
				       sendFrom = F2},
		      Path, _) ->
    v_type_string(F1, [toUser | Path]),
    v_type_string(F2, [sendFrom | Path]),
    ok.

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{msg, removeFriendReq},
      [#field{name = toUser, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = sendFrom, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]}].


get_msg_names() -> [removeFriendReq].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(removeFriendReq) ->
    [#field{name = toUser, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = sendFrom, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'com.paintfriend.chat.proto'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
