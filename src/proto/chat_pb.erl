%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(chat_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_SendMessageResponse.Error'/1, 'enum_value_by_symbol_SendMessageResponse.Error'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("chat_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'SendMessageResponse.Error'() :: 'ERR_OK' | 'ERR_SYS'.
-export_type(['SendMessageResponse.Error'/0]).

%% message types
-type 'SendMessageRequest'() :: #'SendMessageRequest'{}.
-type 'SendMessageResponse'() :: #'SendMessageResponse'{}.
-export_type(['SendMessageRequest'/0, 'SendMessageResponse'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'SendMessageRequest'{} ->
	  e_msg_SendMessageRequest(Msg, TrUserData);
      #'SendMessageResponse'{} ->
	  e_msg_SendMessageResponse(Msg, TrUserData)
    end.



e_msg_SendMessageRequest(Msg, TrUserData) ->
    e_msg_SendMessageRequest(Msg, <<>>, TrUserData).


e_msg_SendMessageRequest(#'SendMessageRequest'{access_token
						   = F1,
					       from = F2, to = F3, text = F4,
					       topic = F5},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>)
    end.

e_msg_SendMessageResponse(Msg, TrUserData) ->
    e_msg_SendMessageResponse(Msg, <<>>, TrUserData).


e_msg_SendMessageResponse(#'SendMessageResponse'{err_code
						     = F1,
						 err_msg = F2, from = F3,
						 text = F4, topic = F5},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>)
    end.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'SendMessageRequest' ->
	  d_msg_SendMessageRequest(Bin, TrUserData);
      'SendMessageResponse' ->
	  d_msg_SendMessageResponse(Bin, TrUserData)
    end.



d_msg_SendMessageRequest(Bin, TrUserData) ->
    dfp_read_field_def_SendMessageRequest(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_SendMessageRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_SendMessageRequest_access_token(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, TrUserData);
dfp_read_field_def_SendMessageRequest(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_SendMessageRequest_from(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData);
dfp_read_field_def_SendMessageRequest(<<26,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_SendMessageRequest_to(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_SendMessageRequest(<<34,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_SendMessageRequest_text(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData);
dfp_read_field_def_SendMessageRequest(<<42,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_SendMessageRequest_topic(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData);
dfp_read_field_def_SendMessageRequest(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, _) ->
    #'SendMessageRequest'{access_token = F1, from = F2,
			  to = F3, text = F4, topic = F5};
dfp_read_field_def_SendMessageRequest(Other, Z1, Z2, F1,
				      F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_SendMessageRequest(Other, Z1, Z2, F1,
					 F2, F3, F4, F5, TrUserData).

dg_read_field_def_SendMessageRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SendMessageRequest(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5,
					 TrUserData);
dg_read_field_def_SendMessageRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SendMessageRequest_access_token(Rest, 0, 0, F1,
						  F2, F3, F4, F5, TrUserData);
      18 ->
	  d_field_SendMessageRequest_from(Rest, 0, 0, F1, F2, F3,
					  F4, F5, TrUserData);
      26 ->
	  d_field_SendMessageRequest_to(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      34 ->
	  d_field_SendMessageRequest_text(Rest, 0, 0, F1, F2, F3,
					  F4, F5, TrUserData);
      42 ->
	  d_field_SendMessageRequest_topic(Rest, 0, 0, F1, F2, F3,
					   F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SendMessageRequest(Rest, 0, 0, F1, F2, F3,
					       F4, F5, TrUserData);
	    1 ->
		skip_64_SendMessageRequest(Rest, 0, 0, F1, F2, F3, F4,
					   F5, TrUserData);
	    2 ->
		skip_length_delimited_SendMessageRequest(Rest, 0, 0, F1,
							 F2, F3, F4, F5,
							 TrUserData);
	    5 ->
		skip_32_SendMessageRequest(Rest, 0, 0, F1, F2, F3, F4,
					   F5, TrUserData)
	  end
    end;
dg_read_field_def_SendMessageRequest(<<>>, 0, 0, F1, F2,
				     F3, F4, F5, _) ->
    #'SendMessageRequest'{access_token = F1, from = F2,
			  to = F3, text = F4, topic = F5}.

d_field_SendMessageRequest_access_token(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SendMessageRequest_access_token(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    TrUserData);
d_field_SendMessageRequest_access_token(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2, F3, F4, F5,
					TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_SendMessageRequest(Rest2, 0, 0,
					  NewFValue, F2, F3, F4, F5,
					  TrUserData).


d_field_SendMessageRequest_from(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SendMessageRequest_from(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5,
				    TrUserData);
d_field_SendMessageRequest_from(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_SendMessageRequest(Rest2, 0, 0, F1,
					  NewFValue, F3, F4, F5, TrUserData).


d_field_SendMessageRequest_to(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SendMessageRequest_to(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_SendMessageRequest_to(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_SendMessageRequest(Rest2, 0, 0, F1,
					  F2, NewFValue, F4, F5, TrUserData).


d_field_SendMessageRequest_text(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SendMessageRequest_text(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5,
				    TrUserData);
d_field_SendMessageRequest_text(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, _, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_SendMessageRequest(Rest2, 0, 0, F1,
					  F2, F3, NewFValue, F5, TrUserData).


d_field_SendMessageRequest_topic(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SendMessageRequest_topic(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
d_field_SendMessageRequest_topic(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_SendMessageRequest(Rest2, 0, 0, F1,
					  F2, F3, F4, NewFValue, TrUserData).


skip_varint_SendMessageRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_SendMessageRequest(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, TrUserData);
skip_varint_SendMessageRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_SendMessageRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData).


skip_length_delimited_SendMessageRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_SendMessageRequest(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     TrUserData);
skip_length_delimited_SendMessageRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SendMessageRequest(Rest2, 0, 0, F1,
					  F2, F3, F4, F5, TrUserData).


skip_32_SendMessageRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_SendMessageRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData).


skip_64_SendMessageRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_SendMessageRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData).


d_msg_SendMessageResponse(Bin, TrUserData) ->
    dfp_read_field_def_SendMessageResponse(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_SendMessageResponse(<<8,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5,
				       TrUserData) ->
    d_field_SendMessageResponse_err_code(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, TrUserData);
dfp_read_field_def_SendMessageResponse(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5,
				       TrUserData) ->
    d_field_SendMessageResponse_err_msg(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData);
dfp_read_field_def_SendMessageResponse(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5,
				       TrUserData) ->
    d_field_SendMessageResponse_from(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData);
dfp_read_field_def_SendMessageResponse(<<34,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5,
				       TrUserData) ->
    d_field_SendMessageResponse_text(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData);
dfp_read_field_def_SendMessageResponse(<<42,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5,
				       TrUserData) ->
    d_field_SendMessageResponse_topic(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData);
dfp_read_field_def_SendMessageResponse(<<>>, 0, 0, F1,
				       F2, F3, F4, F5, _) ->
    #'SendMessageResponse'{err_code = F1, err_msg = F2,
			   from = F3, text = F4, topic = F5};
dfp_read_field_def_SendMessageResponse(Other, Z1, Z2,
				       F1, F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_SendMessageResponse(Other, Z1, Z2, F1,
					  F2, F3, F4, F5, TrUserData).

dg_read_field_def_SendMessageResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SendMessageResponse(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5,
					  TrUserData);
dg_read_field_def_SendMessageResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_SendMessageResponse_err_code(Rest, 0, 0, F1, F2,
					       F3, F4, F5, TrUserData);
      18 ->
	  d_field_SendMessageResponse_err_msg(Rest, 0, 0, F1, F2,
					      F3, F4, F5, TrUserData);
      26 ->
	  d_field_SendMessageResponse_from(Rest, 0, 0, F1, F2, F3,
					   F4, F5, TrUserData);
      34 ->
	  d_field_SendMessageResponse_text(Rest, 0, 0, F1, F2, F3,
					   F4, F5, TrUserData);
      42 ->
	  d_field_SendMessageResponse_topic(Rest, 0, 0, F1, F2,
					    F3, F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SendMessageResponse(Rest, 0, 0, F1, F2, F3,
						F4, F5, TrUserData);
	    1 ->
		skip_64_SendMessageResponse(Rest, 0, 0, F1, F2, F3, F4,
					    F5, TrUserData);
	    2 ->
		skip_length_delimited_SendMessageResponse(Rest, 0, 0,
							  F1, F2, F3, F4, F5,
							  TrUserData);
	    5 ->
		skip_32_SendMessageResponse(Rest, 0, 0, F1, F2, F3, F4,
					    F5, TrUserData)
	  end
    end;
dg_read_field_def_SendMessageResponse(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, _) ->
    #'SendMessageResponse'{err_code = F1, err_msg = F2,
			   from = F3, text = F4, topic = F5}.

d_field_SendMessageResponse_err_code(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SendMessageResponse_err_code(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5,
					 TrUserData);
d_field_SendMessageResponse_err_code(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_SendMessageResponse(Rest, 0, 0,
					   NewFValue, F2, F3, F4, F5,
					   TrUserData).


d_field_SendMessageResponse_err_msg(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SendMessageResponse_err_msg(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5,
					TrUserData);
d_field_SendMessageResponse_err_msg(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_SendMessageResponse(Rest2, 0, 0, F1,
					   NewFValue, F3, F4, F5, TrUserData).


d_field_SendMessageResponse_from(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SendMessageResponse_from(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
d_field_SendMessageResponse_from(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_SendMessageResponse(Rest2, 0, 0, F1,
					   F2, NewFValue, F4, F5, TrUserData).


d_field_SendMessageResponse_text(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SendMessageResponse_text(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
d_field_SendMessageResponse_text(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, _, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_SendMessageResponse(Rest2, 0, 0, F1,
					   F2, F3, NewFValue, F5, TrUserData).


d_field_SendMessageResponse_topic(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SendMessageResponse_topic(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5,
				      TrUserData);
d_field_SendMessageResponse_topic(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_SendMessageResponse(Rest2, 0, 0, F1,
					   F2, F3, F4, NewFValue, TrUserData).


skip_varint_SendMessageResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_SendMessageResponse(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData);
skip_varint_SendMessageResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_SendMessageResponse(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, TrUserData).


skip_length_delimited_SendMessageResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5,
					  TrUserData)
    when N < 57 ->
    skip_length_delimited_SendMessageResponse(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      TrUserData);
skip_length_delimited_SendMessageResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SendMessageResponse(Rest2, 0, 0, F1,
					   F2, F3, F4, F5, TrUserData).


skip_32_SendMessageResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_SendMessageResponse(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, TrUserData).


skip_64_SendMessageResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_SendMessageResponse(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'SendMessageRequest'{} ->
	  merge_msg_SendMessageRequest(Prev, New, TrUserData);
      #'SendMessageResponse'{} ->
	  merge_msg_SendMessageResponse(Prev, New, TrUserData)
    end.

merge_msg_SendMessageRequest(#'SendMessageRequest'{},
			     #'SendMessageRequest'{access_token =
						       NFaccess_token,
						   from = NFfrom, to = NFto,
						   text = NFtext,
						   topic = NFtopic},
			     _) ->
    #'SendMessageRequest'{access_token = NFaccess_token,
			  from = NFfrom, to = NFto, text = NFtext,
			  topic = NFtopic}.

merge_msg_SendMessageResponse(#'SendMessageResponse'{},
			      #'SendMessageResponse'{err_code = NFerr_code,
						     err_msg = NFerr_msg,
						     from = NFfrom,
						     text = NFtext,
						     topic = NFtopic},
			      _) ->
    #'SendMessageResponse'{err_code = NFerr_code,
			   err_msg = NFerr_msg, from = NFfrom, text = NFtext,
			   topic = NFtopic}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'SendMessageRequest'{} ->
	  v_msg_SendMessageRequest(Msg, ['SendMessageRequest'],
				   TrUserData);
      #'SendMessageResponse'{} ->
	  v_msg_SendMessageResponse(Msg, ['SendMessageResponse'],
				    TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_SendMessageRequest/3}).
v_msg_SendMessageRequest(#'SendMessageRequest'{access_token
						   = F1,
					       from = F2, to = F3, text = F4,
					       topic = F5},
			 Path, _) ->
    v_type_string(F1, [access_token | Path]),
    v_type_string(F2, [from | Path]),
    v_type_string(F3, [to | Path]),
    v_type_string(F4, [text | Path]),
    v_type_string(F5, [topic | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_SendMessageResponse/3}).
v_msg_SendMessageResponse(#'SendMessageResponse'{err_code
						     = F1,
						 err_msg = F2, from = F3,
						 text = F4, topic = F5},
			  Path, _) ->
    v_type_int32(F1, [err_code | Path]),
    v_type_string(F2, [err_msg | Path]),
    v_type_string(F3, [from | Path]),
    v_type_string(F4, [text | Path]),
    v_type_string(F5, [topic | Path]),
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{enum, 'SendMessageResponse.Error'},
      [{'ERR_OK', 0}, {'ERR_SYS', -1}]},
     {{msg, 'SendMessageRequest'},
      [#field{name = access_token, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = from, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = to, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []},
       #field{name = text, fnum = 4, rnum = 5, type = string,
	      occurrence = required, opts = []},
       #field{name = topic, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'SendMessageResponse'},
      [#field{name = err_code, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = err_msg, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = from, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []},
       #field{name = text, fnum = 4, rnum = 5, type = string,
	      occurrence = required, opts = []},
       #field{name = topic, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    ['SendMessageRequest', 'SendMessageResponse'].


get_enum_names() -> ['SendMessageResponse.Error'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('SendMessageRequest') ->
    [#field{name = access_token, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = from, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = to, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []},
     #field{name = text, fnum = 4, rnum = 5, type = string,
	    occurrence = required, opts = []},
     #field{name = topic, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []}];
find_msg_def('SendMessageResponse') ->
    [#field{name = err_code, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = err_msg, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = from, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []},
     #field{name = text, fnum = 4, rnum = 5, type = string,
	    occurrence = required, opts = []},
     #field{name = topic, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('SendMessageResponse.Error') ->
    [{'ERR_OK', 0}, {'ERR_SYS', -1}];
find_enum_def(_) -> error.


enum_symbol_by_value('SendMessageResponse.Error',
		     Value) ->
    'enum_symbol_by_value_SendMessageResponse.Error'(Value).


enum_value_by_symbol('SendMessageResponse.Error',
		     Sym) ->
    'enum_value_by_symbol_SendMessageResponse.Error'(Sym).


'enum_symbol_by_value_SendMessageResponse.Error'(0) ->
    'ERR_OK';
'enum_symbol_by_value_SendMessageResponse.Error'(-1) ->
    'ERR_SYS'.


'enum_value_by_symbol_SendMessageResponse.Error'('ERR_OK') ->
    0;
'enum_value_by_symbol_SendMessageResponse.Error'('ERR_SYS') ->
    -1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'com.paintfriend.backend.proto'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
