%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(getFriendListRsp_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("getFriendListRsp_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type chatFriend() :: #chatFriend{}.
-type friendListRsp() :: #friendListRsp{}.
-export_type(['chatFriend'/0, 'friendListRsp'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #chatFriend{} -> e_msg_chatFriend(Msg, TrUserData);
      #friendListRsp{} -> e_msg_friendListRsp(Msg, TrUserData)
    end.



e_msg_chatFriend(Msg, TrUserData) ->
    e_msg_chatFriend(Msg, <<>>, TrUserData).


e_msg_chatFriend(#chatFriend{toUser = F1, sendFrom = F2,
			     reqStatus = F3, nickName = F4, acceptDate = F5,
			     createDate = F6},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_string(TrF5, <<B4/binary, 42>>)
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     e_type_string(TrF6, <<B5/binary, 50>>)
	   end
    end.

e_msg_friendListRsp(Msg, TrUserData) ->
    e_msg_friendListRsp(Msg, <<>>, TrUserData).


e_msg_friendListRsp(#friendListRsp{friends = F1}, Bin,
		    TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_friendListRsp_friends(TrF1, Bin, TrUserData)
      end
    end.

e_mfield_friendListRsp_friends(Msg, Bin, TrUserData) ->
    SubBin = e_msg_chatFriend(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_friendListRsp_friends([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_friendListRsp_friends(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_friendListRsp_friends(Rest, Bin3, TrUserData);
e_field_friendListRsp_friends([], Bin, _TrUserData) ->
    Bin.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      chatFriend -> d_msg_chatFriend(Bin, TrUserData);
      friendListRsp -> d_msg_friendListRsp(Bin, TrUserData)
    end.



d_msg_chatFriend(Bin, TrUserData) ->
    dfp_read_field_def_chatFriend(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_chatFriend(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_chatFriend_toUser(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, TrUserData);
dfp_read_field_def_chatFriend(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_chatFriend_sendFrom(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData);
dfp_read_field_def_chatFriend(<<24, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_chatFriend_reqStatus(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData);
dfp_read_field_def_chatFriend(<<34, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_chatFriend_nickName(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, TrUserData);
dfp_read_field_def_chatFriend(<<42, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_chatFriend_acceptDate(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, TrUserData);
dfp_read_field_def_chatFriend(<<50, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    d_field_chatFriend_createDate(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, TrUserData);
dfp_read_field_def_chatFriend(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, _) ->
    #chatFriend{toUser = F1, sendFrom = F2, reqStatus = F3,
		nickName = F4, acceptDate = F5, createDate = F6};
dfp_read_field_def_chatFriend(Other, Z1, Z2, F1, F2, F3,
			      F4, F5, F6, TrUserData) ->
    dg_read_field_def_chatFriend(Other, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, TrUserData).

dg_read_field_def_chatFriend(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_chatFriend(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, TrUserData);
dg_read_field_def_chatFriend(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_chatFriend_toUser(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, TrUserData);
      18 ->
	  d_field_chatFriend_sendFrom(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, TrUserData);
      24 ->
	  d_field_chatFriend_reqStatus(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, TrUserData);
      34 ->
	  d_field_chatFriend_nickName(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, TrUserData);
      42 ->
	  d_field_chatFriend_acceptDate(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, TrUserData);
      50 ->
	  d_field_chatFriend_createDate(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_chatFriend(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, TrUserData);
	    1 ->
		skip_64_chatFriend(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   TrUserData);
	    2 ->
		skip_length_delimited_chatFriend(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, TrUserData);
	    5 ->
		skip_32_chatFriend(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   TrUserData)
	  end
    end;
dg_read_field_def_chatFriend(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, _) ->
    #chatFriend{toUser = F1, sendFrom = F2, reqStatus = F3,
		nickName = F4, acceptDate = F5, createDate = F6}.

d_field_chatFriend_toUser(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_chatFriend_toUser(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, TrUserData);
d_field_chatFriend_toUser(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_chatFriend(Rest2, 0, 0, NewFValue,
				  F2, F3, F4, F5, F6, TrUserData).


d_field_chatFriend_sendFrom(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_chatFriend_sendFrom(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, TrUserData);
d_field_chatFriend_sendFrom(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, F4, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_chatFriend(Rest2, 0, 0, F1,
				  NewFValue, F3, F4, F5, F6, TrUserData).


d_field_chatFriend_reqStatus(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_chatFriend_reqStatus(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, TrUserData);
d_field_chatFriend_reqStatus(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, _, F4, F5, F6, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_chatFriend(Rest, 0, 0, F1, F2,
				  NewFValue, F4, F5, F6, TrUserData).


d_field_chatFriend_nickName(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_chatFriend_nickName(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, TrUserData);
d_field_chatFriend_nickName(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, _, F5, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_chatFriend(Rest2, 0, 0, F1, F2, F3,
				  NewFValue, F5, F6, TrUserData).


d_field_chatFriend_acceptDate(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_chatFriend_acceptDate(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				  TrUserData);
d_field_chatFriend_acceptDate(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, _, F6, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_chatFriend(Rest2, 0, 0, F1, F2, F3,
				  F4, NewFValue, F6, TrUserData).


d_field_chatFriend_createDate(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    d_field_chatFriend_createDate(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				  TrUserData);
d_field_chatFriend_createDate(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_chatFriend(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, NewFValue, TrUserData).


skip_varint_chatFriend(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    skip_varint_chatFriend(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, TrUserData);
skip_varint_chatFriend(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_chatFriend(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, TrUserData).


skip_length_delimited_chatFriend(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, TrUserData)
    when N < 57 ->
    skip_length_delimited_chatFriend(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				     TrUserData);
skip_length_delimited_chatFriend(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_chatFriend(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, TrUserData).


skip_32_chatFriend(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_chatFriend(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, TrUserData).


skip_64_chatFriend(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, TrUserData) ->
    dfp_read_field_def_chatFriend(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, TrUserData).


d_msg_friendListRsp(Bin, TrUserData) ->
    dfp_read_field_def_friendListRsp(Bin, 0, 0,
				     id([], TrUserData), TrUserData).

dfp_read_field_def_friendListRsp(<<10, Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    d_field_friendListRsp_friends(Rest, Z1, Z2, F1,
				  TrUserData);
dfp_read_field_def_friendListRsp(<<>>, 0, 0, F1,
				 TrUserData) ->
    #friendListRsp{friends = lists_reverse(F1, TrUserData)};
dfp_read_field_def_friendListRsp(Other, Z1, Z2, F1,
				 TrUserData) ->
    dg_read_field_def_friendListRsp(Other, Z1, Z2, F1,
				    TrUserData).

dg_read_field_def_friendListRsp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_friendListRsp(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_friendListRsp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_friendListRsp_friends(Rest, 0, 0, F1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_friendListRsp(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_friendListRsp(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_friendListRsp(Rest, 0, 0, F1,
						    TrUserData);
	    5 -> skip_32_friendListRsp(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_friendListRsp(<<>>, 0, 0, F1,
				TrUserData) ->
    #friendListRsp{friends = lists_reverse(F1, TrUserData)}.

d_field_friendListRsp_friends(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_friendListRsp_friends(Rest, N + 7,
				  X bsl N + Acc, F1, TrUserData);
d_field_friendListRsp_friends(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_chatFriend(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_friendListRsp(Rest2, 0, 0,
				     cons(NewFValue, F1, TrUserData),
				     TrUserData).


skip_varint_friendListRsp(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    skip_varint_friendListRsp(Rest, Z1, Z2, F1, TrUserData);
skip_varint_friendListRsp(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    dfp_read_field_def_friendListRsp(Rest, Z1, Z2, F1,
				     TrUserData).


skip_length_delimited_friendListRsp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_friendListRsp(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
skip_length_delimited_friendListRsp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_friendListRsp(Rest2, 0, 0, F1,
				     TrUserData).


skip_32_friendListRsp(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_friendListRsp(Rest, Z1, Z2, F1,
				     TrUserData).


skip_64_friendListRsp(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_friendListRsp(Rest, Z1, Z2, F1,
				     TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #chatFriend{} ->
	  merge_msg_chatFriend(Prev, New, TrUserData);
      #friendListRsp{} ->
	  merge_msg_friendListRsp(Prev, New, TrUserData)
    end.

merge_msg_chatFriend(#chatFriend{acceptDate =
				     PFacceptDate,
				 createDate = PFcreateDate},
		     #chatFriend{toUser = NFtoUser, sendFrom = NFsendFrom,
				 reqStatus = NFreqStatus, nickName = NFnickName,
				 acceptDate = NFacceptDate,
				 createDate = NFcreateDate},
		     _) ->
    #chatFriend{toUser = NFtoUser, sendFrom = NFsendFrom,
		reqStatus = NFreqStatus, nickName = NFnickName,
		acceptDate =
		    if NFacceptDate =:= undefined -> PFacceptDate;
		       true -> NFacceptDate
		    end,
		createDate =
		    if NFcreateDate =:= undefined -> PFcreateDate;
		       true -> NFcreateDate
		    end}.

merge_msg_friendListRsp(#friendListRsp{friends =
					   PFfriends},
			#friendListRsp{friends = NFfriends}, TrUserData) ->
    #friendListRsp{friends =
		       'erlang_++'(PFfriends, NFfriends, TrUserData)}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #chatFriend{} ->
	  v_msg_chatFriend(Msg, [chatFriend], TrUserData);
      #friendListRsp{} ->
	  v_msg_friendListRsp(Msg, [friendListRsp], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_chatFriend/3}).
v_msg_chatFriend(#chatFriend{toUser = F1, sendFrom = F2,
			     reqStatus = F3, nickName = F4, acceptDate = F5,
			     createDate = F6},
		 Path, _) ->
    v_type_string(F1, [toUser | Path]),
    v_type_string(F2, [sendFrom | Path]),
    v_type_int32(F3, [reqStatus | Path]),
    v_type_string(F4, [nickName | Path]),
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [acceptDate | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [createDate | Path])
    end,
    ok;
v_msg_chatFriend(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, chatFriend}, X, Path).

-dialyzer({nowarn_function,v_msg_friendListRsp/3}).
v_msg_friendListRsp(#friendListRsp{friends = F1}, Path,
		    TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_chatFriend(Elem, [friends | Path],
				 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, chatFriend}}, F1,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{msg, chatFriend},
      [#field{name = toUser, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = sendFrom, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = reqStatus, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = nickName, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = acceptDate, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = createDate, fnum = 6, rnum = 7,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, friendListRsp},
      [#field{name = friends, fnum = 1, rnum = 2,
	      type = {msg, chatFriend}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() -> [chatFriend, friendListRsp].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(chatFriend) ->
    [#field{name = toUser, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = sendFrom, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = reqStatus, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = nickName, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = acceptDate, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = createDate, fnum = 6, rnum = 7,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(friendListRsp) ->
    [#field{name = friends, fnum = 1, rnum = 2,
	    type = {msg, chatFriend}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'com.paintfriend.chat.proto'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
